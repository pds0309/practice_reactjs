
**리액트**	
- component refresh
	- 새로운 데이터 들어올때 자동 UI Refresh

- 변화가 일어날 때만 그곳만, 원하는 부분만 Refresh 가능
	- 최소단위로 효율적인 렌더링 가능



**cra**

- webpack , babel 등 react 개발에 많이사용하는 도구 포함
- 별도의 설정 과정을 생략하고 환경구성해 웹앱 개발 가능



```shell
$ npx create-react-app your-app
```

```shell
$ npm start
```



**index.js**
- src 폴더에 포함되어 있다. 
- 메인 프로그램이라고 할 수 있다. 여기에서 HTML 템플릿 및 JavaScript의 컴포넌트를 조합하여 렌더링하고 실제 표시한다.

**App.js**
- src 폴더에 있다. 
- 이것은 컴포넌트를 정의하는 프로그램이다. 실제로 화면에 표시되는 내용 등은 여기에서 정의된다.

**index.html**
- public 폴더에 있다. 
- 메인 프로그램인 index.js에 대응되는 것으로, HTML 템플릿 파일이다. 이 파일이 직접 표시되는 것은 아니고, index.js에 의해 일어 와서 렌더링된 결과가 표시된다. (index.html 이름을 바꿀시 오류발생)






### 상태가 변경될 때 마다 모든 컴포넌트들이 리로드 되는 것을 원하지 않음


**useEffect**

- useEffect(Code,[Dependency]);
	- dependency 를 지켜보다가 그거 변경 식별될때 실행됨
	- 언제 어떤코드를 실행할지에 대한 선택권을 준다.

- 파라미터
	- 한번만실행하고 싶은 코드
	- 특정 개체가 변경될때 실행

- 실행시키고자 하는 함수와 React.js가 이벤트를 주시하게끔 하는dependency로 이루어져있다. 

- 원하는 부분을 지정해 해당 부분만 변화시킴
	- ex) 버튼 누르면 버튼만, 검색창 이용시에는 검색창만 리렌더링







• useState(): 변수, 변수를 제어하는 함수로 구성되며 변하는 값을 제어, 해당 부분의 리렌더링을 위함
• props: 태그의 속성 값을 함수의 아규먼트 처럼 컴포넌트에 값을 전달해준다.
• useEffect(): 코드의 실행 시점을 관리할 수 있는 선택권을 얻는 방어막 같은 존재, 디펜던시가 없을 경우 최초 1회 실행, 있을 경우 해당 값이 변할 경우 실행한다. 이 때 디펜던시는 여러개 입력이 가능하다.

- 부모 컴포넌트에서 리렌더링이 일어날 경우 모든 자식들이 리렌더링이 된다.(wa can use memo)
- propType을 설치하고 props의 타입을 지정해 줄 수 있다. 이 때 isRequired로 필수값을 지정 가능





**cleanup function**

-컴포넌트를 destroy 할떄도 코드를 실행할 수 있다?
	- useEffect 내부에 return 하면 가능
 